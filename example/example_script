%% Example script to co-register between OPM sensor positions, Optical Scan, and Simulation mesh models

% This pipeline is implemented for a subject dataset where we have the subject scan already in OPM sensor
% space, and hence we can skip registering the subject mesh to the opm sensors and go straight to pulling in
% the mesh models

%%

% First, need to create the spm opm structure to extract the sensor positions
cd('coreg_path\example')


posfile_back = 'positions_all_OP00210.tsv';

D = {}; 
filetemplate = sprintf('nervesim-right-run_002_array1.lvm');
S = struct(); 
S.data = filetemplate;
S.positions = posfile_back; 
D = spm_opm_create(S); 

%% Load and process the optical scan
optical = ft_read_headshape('surface.stl', 'unit', 'mm');
p = struct();
p.vertices = optical.pos;
p.faces = optical.tri;
p2 = reducepatch(p, 0.01); % Reduce complexity of the mesh
subject.pos = p2.vertices;
subject.tri = p2.faces;

% Prepare mesh structure
mesh = struct();
mesh.vertices = subject.pos;
mesh.faces = subject.tri;
mesh.unit = 'mm'; % Define unit explicitly - make sure it matches the grad structure!

%%
% now we need to register the simulation meshes to the optical scan which
% is in opm sensor space

sim_fids_select = spm_mesh_select(mesh); %select left shoulder, right shoulder and chin
sim_fids = sim_fids_select';

S = [];
S.subject = mesh; 
S.fiducials = sim_fids;
S.plot = 'true';

T = cr_register_torso(S);

S = []; 
S.subject = mesh;
S.T = T;
S.sensors = sensors(D, 'MEG'); 
S.spine_mode = 'default';
all_meshes = cr_check_registration(S);

%now we can save individual meshes in the space of opm sensor space
mesh_torso = all_meshes.mesh_torso;
mesh_spine = all_meshes.mesh_spine;
mesh_bone = all_meshes.mesh_vertebrae;
mesh_heart = all_meshes.mesh_heart;
mesh_lungs = all_meshes.mesh_lungs;

%create a source grid along the centerline of the spinal cord

y_min = min(mesh_spine.vertices(:,2));
y_max = max(mesh_spine.vertices(:,2));

S = [];
S.spine = mesh_spine;
S.T = T;
S.resolution = 10; 
S.ylim = [y_min y_max];
S.unit = 'mm';
sources_center_line = cr_generate_spine_center(S);

%from here we now have a transform matrix (T), source grid and all relevent meshes in opm sensor space - this is everything we need for BEM and FEM forward modelling!
